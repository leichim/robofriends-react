{"version":3,"sources":["serviceWorker.js","components/Card.js","components/Cardlist.js","components/CounterButton.js","components/Header.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","reducers.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Card","id","name","email","className","src","alt","Cardlist","robots","map","user","i","key","CounterButton","updateCount","setState","count","nextProps","nextState","this","color","props","onClick","React","Component","Header","SearchBox","searchfield","searchChange","aria-label","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","hasError","App","onRequestRobots","filteredRobots","filter","robot","toLowerCase","includes","searchField","isPending","onSearchChange","connect","requestRobots","searchRobots","dispatch","event","payload","target","value","fetch","response","json","data","initialState","initialRobotState","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.da95dd91.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\n// A JS function implies it being the render function\r\nconst Card = ({id, name, email}) => {\r\n    return (\r\n        <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <img src={'https://robohash.org/' + id + '?height=200width=200'} alt=\"Robots\" />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst Cardlist = ({robots}) => {\r\n    \r\n    // const cardComponent = robots.map((user, i) => {\r\n    //     return (<Card id={robots[i].id} name={robots[i].name} email={robots[i].email} key={i}/>)\r\n    // })\r\n\r\n    // Will display the ErrorBoundary\r\n    // if( true ) {\r\n    //     throw new Error('NOOOO');\r\n    // }\r\n    \r\n    return (\r\n        <div>\r\n            {\r\n                robots.map((user, i) => {\r\n                    return ( <Card id={robots[i].id} name={robots[i].name} email={robots[i].email} key={i} /> )\r\n                })\r\n            }  \r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Cardlist;","import React from 'react';\r\n\r\n// A JS function implies it being the render function\r\n// React also has PureComponents, these are components that only update when simple props update.\r\n// Use React.PureComponent then.\r\nclass CounterButton extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            count: 0\r\n        }\r\n    }\r\n    \r\n    // Lifecycle method that can prevent the component from rendering again\r\n    // Controls the update cycle based upon the props and states passed\r\n    // Don't overdo this for every component, as it influences performance\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        console.log(nextProps);\r\n        console.log(nextState);\r\n\r\n        // You can also access props and so forth and decide rendering\r\n\r\n        // Only updates the component when count is changed\r\n        if( this.state.count !== nextState.count ) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        } \r\n\r\n    }\r\n\r\n    updateCount = () => {\r\n        // this.setState({ count: this.state.count + 1}); // State is not async, so use another method\r\n        this.setState( state => {\r\n            return { count: state.count + 1 }  // Creates a new state based on the old state  \r\n        } );\r\n    }\r\n    \r\n    render() {\r\n        console.log('CounterButton');\r\n        return (\r\n            <button color={this.props.color} onClick={this.updateCount}>\r\n                Count: {this.state.count}\r\n            </button>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default CounterButton;","import React from 'react';\r\nimport CounterButton from './CounterButton';\r\n\r\n// A JS function implies it being the render function\r\nclass Header extends React.Component {\r\n    \r\n    // Lifecycle method that can prevent the component from rendering again\r\n    // Controls the update cycle based upon the props and states passed\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return false; // The default is always true\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                \r\n                <h1 className=\"f1\">RoboFriends</h1>\r\n                <CounterButton color={'red'} />\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst SearchBox  = ( {searchfield, searchChange} ) => {\r\n    \r\n    return (\r\n        <div className=\"pa2\">\r\n            <input aria-label=\"Search Robots\" className=\"pa3 ba b--green bg-lightest-blue\" type=\"search\" placeholder=\"Search Robots\" onChange={searchChange} />\r\n        </div>\r\n        \r\n    )\r\n\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n// Anything passed within an element is accesible using props.children\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '70vh'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\n/**\r\n * Error boundaries can be used to display something else when an error happens. Than can be wrapped arround components\r\n * Very useful for production apps.\r\n * \r\n * If you're in production, you wont really see the ErrorBoundary\r\n */\r\n\r\nclass ErrorBoundary extends React.Component {\r\n    \r\n    constructor(props) {\r\n\r\n        super(props);\r\n\r\n        this.state = {\r\n            hasError: false\r\n        };\r\n\r\n    }\r\n\r\n    // Equals to a try catch block, if anything went wrong inside the component, error is catched\r\n    componentDidCatch() {\r\n        this.setState({hasError: true})\r\n    }\r\n\r\n    render() {\r\n        if( this.state.hasError ) {\r\n            return(<h1>Oops, Error!</h1>);\r\n        }  \r\n        \r\n        return this.props.children;\r\n        \r\n    }\r\n\r\n}\r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Cardlist from '../components/Cardlist';\r\nimport Header from '../components/Header';\r\nimport SearchBox from '../components/SearchBox';\r\n// import {robots} from './robots';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport './App.css';\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\n// Used by react-redux to connect our props.\r\n// Geez, react is so cumbersome compared to Vue\r\n// This also gets the state from the store\r\nconst mapStateToProps = (state) => {\r\n    // console.log(state);\r\n    return {\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error,\r\n        searchField: state.searchRobots.searchField, // more reducers\r\n        // searchField: state.searchField // One reducer\r\n    }\r\n};\r\n\r\n// Dispatch is the thing that triggered the action,\r\n// so it gets dispatched in the reducer\r\n// What is dispatch??\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\n// You may use the/containers/ folder to place your primary app files in.\r\nclass App extends React.Component {\r\n\r\n    // Set-ups the smart component\r\n    constructor() {\r\n        super(); // Required to initialize the thing and use 'this' keyword\r\n\r\n        // State is something that can change and affect our app, usually living in our parent component. In other words, dynamic props\r\n        // this.state = {\r\n        //     robots: [],\r\n        //     searchfield: ''            \r\n        // }\r\n        // We're now passing everything as a prop\r\n\r\n        // Use this.setState({property: value}) to change the state for a given item\r\n\r\n    }\r\n\r\n    // This is a lifecycle method, being part of react\r\n    componentDidMount() {\r\n\r\n        this.props.onRequestRobots();\r\n\r\n        // console.log(this.props.store.getState());\r\n\r\n        // Fetch is async, updates users when response is there\r\n        // Fetch is an object on the window object, it's a tool that can be used in JS\r\n        // fetch('https://jsonplaceholder.typicode.com/users')\r\n        //     .then( response => {\r\n        //         return response.json();\r\n        //     })\r\n        //     .then( users => {\r\n        //         this.setState({robots: users});\r\n        //     });\r\n\r\n        // Above.... We also did this with redux\r\n\r\n    }\r\n\r\n    // You can add functions \r\n    // Use the arrow function to get the 'this' from the correct context, \r\n    // otherwise, if using a normal function it will retrieve 'this' from the context it is used\r\n    // onSearchChange = (event) => {\r\n    //     this.setState({ searchfield: event.target.value});\r\n    // }\r\n\r\n    // The above function is now passed as a prop using connect()\r\n    // referring to the setSearchField action from actions.js\r\n\r\n    // Built-in React function\r\n    // The render method is called again if the state of a used property changes\r\n    render() {\r\n\r\n        // const { robots, searchfield } = this.state; -> destructure them, now you can just use robots and searchfield, no this.state.robots etc anymore..\r\n\r\n        // Basic example\r\n        // const filteredRobots = this.state.robots.filter( robot => {\r\n        //     return robot.name.toLowerCase().includes( this.state.searchfield.toLowerCase() );\r\n        // });\r\n        \r\n        // Redux example\r\n        const filteredRobots = this.props.robots.filter( robot => {\r\n            return robot.name.toLowerCase().includes( this.props.searchField.toLowerCase() );\r\n        });        \r\n\r\n        if( this.props.isPending ) {\r\n            return <h1>Loading</h1>\r\n        } else {\r\n            // Scroll is a component with a slot, it can use children\r\n            // \r\n            return (\r\n                <div className=\"tc\">\r\n                    <Header /> \r\n                    {/* Basic <SearchBox searchChange={this.onSearchChange} />, Redux: */}\r\n                    <SearchBox searchChange={this.props.onSearchChange} />\r\n                    <Scroll>\r\n                        <ErrorBoundary>\r\n                            <Cardlist robots={filteredRobots} />\r\n                        </ErrorBoundary> \r\n                    </Scroll>\r\n                </div>\r\n            )\r\n        }\r\n\r\n\r\n    }\r\n\r\n}\r\n\r\n// Connect is a higher other function, a function that returns another function\r\n// Thus, we can use double brackets.\r\n// Connect is used to subscribe to any changes in the store\r\n// Connect connects redux to react\r\n// Use connect to match several containers to a store\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \r\n    CHANGE_SEARCH_FIELD, \r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAIL\r\n} from './constants'; \r\n\r\nexport const setSearchField = (text) => ({\r\n    // console.log(text);\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text // The data that is send is payload\r\n}); // Curly brackets in arrow function means return\r\n\r\n// WTH is a dispatch?\r\n// This is a higher roder function, a function that returns a function. \r\n// A sort of functionception, a function in a function\r\n// trunk middleware uses this to listen this, recognizes it as a function,\r\n// Then processs the dispatch, and return an object in the end. \r\n// By default it dispatches the pending thing, after async actions are done.\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then( response => response.json())\r\n    .then( data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data}) )\r\n    .catch( error => dispatch({ type: REQUEST_ROBOTS_FAIL, payload: error}) );\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAIL = 'REQUEST_ROBOTS_FAIL';","import { \r\n    CHANGE_SEARCH_FIELD, \r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAIL\r\n} from './constants'; \r\n\r\nconst initialState = {\r\n    searchField: ''\r\n}\r\n\r\n// Reducers get the input of a default state and modify the default state\r\nexport const searchRobots = ( state = initialState, action = {} ) => {\r\n    // console.log(action.type);\r\n    switch( action.type ) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            // Create a new object, using the initialState\r\n            // Adapts the searchField property\r\n            return Object.assign({}, state, {searchField: action.payload} );\r\n\r\n            // Other ways, just destructure the existing opject\r\n            // return { ...state, searchField: action.payload }\r\n        default:\r\n            return state;\r\n\r\n    }\r\n\r\n}\r\n\r\nconst initialRobotState = {\r\n    robots: [],\r\n    error: '',\r\n    isPending: false\r\n}\r\n\r\nexport const requestRobots = ( state = initialRobotState, action = {}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return { ...state, isPending: true };\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return { ...state, robots: action.payload, isPending: false };\r\n        case REQUEST_ROBOTS_FAIL:\r\n            return { ...state, error: action.payload, isPending: false };  \r\n        default:\r\n            return state;                        \r\n    }\r\n}","// General packages\nimport React, { Fragment } from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\n\n\n// Application specific imports\nimport './index.css';\nimport App from './containers/App';\nimport { searchRobots, requestRobots } from './reducers';\n\n// This is a logger function, middleware, from Redux\nconst logger = createLogger();\n\n// Combine reducers\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\n\n// This is the example with one reducer, \n// usually you have a root reducer\n// The reducer is the function that is executed after the event (action)\nconst store = createStore(\n\trootReducer, // Or use a single reducer, such as searchRobots\n\tapplyMiddleware(thunkMiddleware, logger)\n);\n\n// Fragment doesn't render in html\n// Provider component passes the store down to all the children\n// Thus, react/redux uses providers to give components access to the store\nReactDOM.render(\n\t<React.StrictMode>\n    \t\n\t\t<Provider store={store}>\n\t\t\t<Fragment>\n\t\t\t\t<App />\n\t\t\t</Fragment>\n\t\t</Provider>\n\t\t\n  \t</React.StrictMode>,\n  \tdocument.getElementById('root')\n);\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\nserviceWorker.register();\n\n// See https://github.com/rusty-jnr/robofriends/ for a modern example using hooks"],"sourceRoot":""}