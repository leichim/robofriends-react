{"version":3,"sources":["serviceWorker.js","components/Cardlist.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Cardlist","robots","Error","SearchBox","searchfield","searchChange","className","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","this","setState","React","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","name","toLowerCase","includes","length","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"gMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4CCOSC,EAtBE,SAAC,GAAa,EAAZC,OAOX,MAAM,IAAIC,MAAM,UCGTC,EAXI,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAE/B,OACI,yBAAKC,UAAU,OACX,2BAAOA,UAAU,mCAAmCC,KAAK,SAASC,YAAY,gBAAgBC,SAAUJ,MCKrGK,EARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,SAChEJ,EAAMK,WC+BJC,E,kDA1BX,WAAYN,GAAQ,IAAD,8BAEf,cAAMA,IAEDO,MAAQ,CACTC,UAAU,GALC,E,gEAYfC,KAAKC,SAAS,CAACF,UAAU,M,+BAIzB,OAAIC,KAAKF,MAAMC,SACJ,4CAGJC,KAAKT,MAAMK,a,GAtBEM,IAAMC,WCyEnBC,G,wDAnEX,aAAe,IAAD,8BACV,gBA8BJC,eAAiB,SAACC,GACd,EAAKL,SAAS,CAAEjB,YAAasB,EAAMC,OAAOC,SA5B1C,EAAKV,MAAQ,CACTjB,OAAQ,GACRG,YAAa,IANP,E,gEAcO,IAAD,OAIhByB,MAAM,8CACDC,MAAM,SAAAC,GACH,OAAOA,EAASC,UAEnBF,MAAM,SAAAG,GACH,EAAKZ,SAAS,CAACpB,OAAQgC,S,+BAczB,IAAD,OAICC,EAAiBd,KAAKF,MAAMjB,OAAOkC,QAAQ,SAAAC,GAC7C,OAAOA,EAAMC,KAAKC,cAAcC,SAAU,EAAKrB,MAAMd,YAAYkC,kBAGrE,OAAiC,IAA7BlB,KAAKF,MAAMjB,OAAOuC,OACX,uCAIH,yBAAKlC,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWD,aAAce,KAAKK,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUxB,OAAQiC,W,GA1D5BZ,IAAMC,YCHxBkB,IAASC,OACR,kBAAC,IAAMC,WAAP,KACI,kBAAC,WAAD,KAAU,kBAAC,EAAD,QAEZC,SAASC,eAAe,SNsHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.1af88242.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst Cardlist = ({robots}) => {\r\n    \r\n    // const cardComponent = robots.map((user, i) => {\r\n    //     return (<Card id={robots[i].id} name={robots[i].name} email={robots[i].email} key={i}/>)\r\n    // })\r\n\r\n    if( true ) {\r\n        throw new Error('NOOOO');\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            {\r\n                robots.map((user, i) => {\r\n                    return ( <Card id={robots[i].id} name={robots[i].name} email={robots[i].email} key={i} /> )\r\n                })\r\n            }  \r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Cardlist;","import React from 'react';\r\n\r\nconst SearchBox  = ( {searchfield, searchChange} ) => {\r\n    \r\n    return (\r\n        <div className=\"pa2\">\r\n            <input className=\"pa3 ba b--green bg-lightest-blue\" type=\"search\" placeholder=\"Search Robots\" onChange={searchChange} />\r\n        </div>\r\n        \r\n    )\r\n\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n// Anything passed within an element is accesible using props.children\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '70vh'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\n/**\r\n * Error boundaries can be used to display something else when an error happens. Than can be wrapped arround components\r\n * Very useful for production apps.\r\n * \r\n * If you're in production, you wont really see the ErrorBoundary\r\n */\r\n\r\nclass ErrorBoundary extends React.Component {\r\n    \r\n    constructor(props) {\r\n\r\n        super(props);\r\n\r\n        this.state = {\r\n            hasError: false\r\n        };\r\n\r\n    }\r\n\r\n    // Equals to a try catch block, if anything went wrong inside the component, error is catched\r\n    componentDidCatch() {\r\n        this.setState({hasError: true})\r\n    }\r\n\r\n    render() {\r\n        if( this.state.hasError ) {\r\n            return(<h1>Oops, Error!</h1>);\r\n        }  \r\n        \r\n        return this.props.children;\r\n        \r\n    }\r\n\r\n}\r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\nimport Cardlist from './components/Cardlist';\r\nimport SearchBox from './components/SearchBox';\r\n// import {robots} from './robots';\r\nimport Scroll from './components/Scroll';\r\n\r\nimport ErrorBoundary from './components/ErrorBoundary';\r\n\r\nimport './App.css';\r\n\r\n// You may use /containers/ folder to place your primary app files in.\r\n\r\nclass App extends React.Component {\r\n\r\n    // Set-ups the smart component\r\n    constructor() {\r\n        super(); // Required to initialize the thing and use 'this' keyword\r\n\r\n        // State is something that can change and affect our app, usually living in our parent component. In other words, dynamic props\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: ''            \r\n        }\r\n\r\n        // Use this.setState({property: value}) to change the state for a given item\r\n\r\n    }\r\n\r\n    // This is a lifecycle method, being part of react\r\n    componentDidMount() {\r\n\r\n        // Fetch is async, updates users when response is there\r\n        // Fetch is an object on the window object, it's a tool that can be used in JS\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then( response => {\r\n                return response.json();\r\n            })\r\n            .then( users => {\r\n                this.setState({robots: users});\r\n            });\r\n\r\n    }\r\n\r\n    // You can add functions \r\n    // Use the arrow function to get the 'this' from the correct context, \r\n    // otherwise, if using a normal function it will retrieve 'this' from the context it is used\r\n    onSearchChange = (event) => {\r\n        this.setState({ searchfield: event.target.value});\r\n    }\r\n\r\n    // Built-in React function\r\n    // The render method is called again if the state of a used property changes\r\n    render() {\r\n\r\n        // const { robots, searchfield } = this.state; -> destructure them, now you can just use robots and searchfield, no this.state.robots etc anymore..\r\n\r\n        const filteredRobots = this.state.robots.filter( robot => {\r\n            return robot.name.toLowerCase().includes( this.state.searchfield.toLowerCase() );\r\n        });\r\n\r\n        if( this.state.robots.length === 0 ) {\r\n            return <h1>Loading</h1>\r\n        } else {\r\n            // Scroll is a component with a slot, it can use children\r\n            return (\r\n                <div className=\"tc\">\r\n                    <h1 className=\"f1\">RoboFriends</h1>\r\n                    <SearchBox searchChange={this.onSearchChange} />\r\n                    <Scroll>\r\n                        <ErrorBoundary>\r\n                            <Cardlist robots={filteredRobots} />\r\n                        </ErrorBoundary> \r\n                    </Scroll>\r\n                </div>\r\n            )\r\n        }\r\n\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default App;","import React, { Fragment } from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nimport './index.css';\nimport App from './App';\n\n// Fragment doesn't render in html\nReactDOM.render(\n\t<React.StrictMode>\n    \t<Fragment><App /></Fragment>\n  \t</React.StrictMode>,\n  \tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}